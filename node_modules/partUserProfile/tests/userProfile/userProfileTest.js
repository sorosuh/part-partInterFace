let u = require("partUtilities");
const q = require('q');
let schema = require("./schema");
let random = Math.random().toString().slice(-6);
let username = 'test_' + random;
console.log(username)

let portObject = {dev: 84, test: 80, prod: 80};
let mode = (process.env.mode || process.env.MODE || "TEST").toLowerCase();
const options = new new u.OptionsGen(
    "127.0.0.1",
    portObject[mode],
    "/app/userProfile/"
)();
const options_1 = new new u.OptionsGen(
    "127.0.0.1",
    portObject[mode],
    "/app/employees/"
)();

let describeInput = { // ها testCase آرایه ای از
    signUp: [{
        apiName: 'signUp',  //موردنظر api نام
        options: options.get('PUT', 'signUp'), //api مربوط به هر  function متد و
        input: {   // api پارامترهای ورودی لازم، مربوط به هر
            "id":"45684",
            "data":{
                "username": username,
                "password": "1234",
                "department": "intern_6",
                "NationalCode": 1234554321,
                "JobSkills": "programmer",
                "jobTitle": "maneger",
                "ManagersName": "aaa",
                "firstname": "سروش",
                "lastname": "باقریان",
                "gender": 0,
                "education": "لیسانس",
                "email": "soroushbagherian@yahoo.com"
            },
            "parent":"test"
        },
        output: outputGen('signUp'), // نحوه نمایش خروجی
        title: 'ورودی معتبر برای ثبت نام'

    }, {
        apiName: 'signUp',  //موردنظر api نام
        options: options.get('PUT', 'signUp'), //api مربوط به هر  function متد و
        input: {   // api پارامترهای ورودی لازم، مربوط به هر
            "id":"45684",
            "data":{
                "username": username,
                "password": "1234",
                "department": "intern_6",
                "NationalCode": 1234554321,
                "JobSkills": "programmer",
                "jobTitle": "maneger",
                "ManagersName": "aaa",
                "firstname": "سروش",
                "lastname": "باقریان",
                "gender": 0,
                "education": "لیسانس",
                "email": "soroushbagherian@yahoo.com"
            },
            "parent":"test"
        },
        output: outputGen('signUpFail'), // نحوه نمایش خروجی
        title: 'ورودی تکراری برای ثبت نام'
    }
    ],
    login: [
        {
            apiName: 'login',  //موردنظر api نام
            options: options.get('POST', 'login'), //api مربوط به هر  function متد و
            input: {   // api پارامترهای ورودی لازم، مربوط به هر
                'username': username,
                'password': '12345'
            },

            output: outputGen('loginFail'), // نحوه نمایش خروجی
            title: 'ورودی نامعتبر برای لاگین'
        },
        {
            apiName: 'login',  //موردنظر api نام
            options: options.get('POST', 'login'), //api مربوط به هر  function متد و
            input: {   // api پارامترهای ورودی لازم، مربوط به هر
                'username': username,
                'password': '1234'
            },
            // before: dosignUp,
            output: outputGen('login'), // نحوه نمایش خروجی
            title: 'ورودی معتبر برای لاگین'
        }

    ],
    getProfile: [
        {
            apiName: 'getProfile',  //موردنظر api نام
            options: options.get('GET', 'getProfile'), //api مربوط به هر  function متد و
            input: {   // api پارامترهای ورودی لازم، مربوط به هر
            },
            //before: login,
            output: outputGen('getProfileFail'), // نحوه نمایش خروجی
            title: 'ورودی نامعتبر برای دریافت پروفایل'
        },
        {
            apiName: 'getProfile',  //موردنظر api نام
            options: options.get('GET', 'getProfile'), //api مربوط به هر  function متد و
            input: {   // api پارامترهای ورودی لازم، مربوط به هر
            },
            //before: login,
            output: outputGen('getProfile'), // نحوه نمایش خروجی
            title: 'ورودی معتبر برای دریافت پروفایل'
        }
    ],
    editProfile: [
        {
            apiName: 'editProfile',  //موردنظر api نام
            options: options.get('POST', 'editProfile'), //api مربوط به هر  function متد و
            input: {
                "type": "real",
                "idNumber": "0311857671",
                "firstName": "ویرایش شده",
                "lastName":"ویرایش شده"
            },
            output: outputGen('editProfile'), // نحوه نمایش خروجی
            title: 'ورودی معتبر برای ویرایش پروفایل'
         }
        , {
            apiName: 'editProfileFail',  //موردنظر api نام
            options: options.get('POST', 'editProfileFail'), //api مربوط به هر  function متد و
            input: {
            },
            output: outputGen('editProfileFail'), // نحوه نمایش خروجی
            title: 'ورودی نامعتبر برای ویرایش پروفایل'
        }
    ],
    changePassword: [
        {
            apiName: 'changePassword',  //موردنظر api نام
            options: options.get('POST', 'changePassword'), //api مربوط به هر  function متد و
            input: {   // api پارامترهای ورودی لازم، مربوط به هر
                'username': username,
                'password': '123456',
                "email": "m.yaghoutiiii@yahoo.com"
            },
            output: outputGen('changePasswordFail'), // نحوه نمایش خروجی
            title: 'ورودی نامعتبر برای پسورد'
        }, {
            apiName: 'changePassword',  //موردنظر api نام
            options: options.get('POST', 'changePassword'), //api مربوط به هر  function متد و
            input: {   // api پارامترهای ورودی لازم، مربوط به هر
                'username': username,
                'password': '123321',
                "email": null
            },
            output: outputGen('changePassword'), // نحوه نمایش خروجی
            title: 'ورودی معتبر برای پسورد'
        }
    ],
    logout: [
        {
            apiName: 'logout',  //موردنظر api نام
            options: options.get('POST', 'logout'), //api مربوط به هر  function متد و
            input: {},
            output: outputGen('logoutFail'), // نحوه نمایش خروجی
            title: 'عدم دسترسی کاربر',
        },
        {
            apiName: 'logout',  //موردنظر api نام
            options: options.get('POST', 'logout'), //api مربوط به هر  function متد و
            input: {},
            output: outputGen('logout'), // نحوه نمایش خروجی
            title: 'داده معتبر برای فراخوانی تابع logout',
            before: login
        }
    ]
};

describe('Public HTTP APIs', function () {  //ها testCase فراخوانی هر یک از توابع موجود در
    describeGen('signUp', describeInput['signUp']);
    describeGen('login', describeInput['login']);
    describeGen('getProfile', describeInput['getProfile']);
    describeGen('editProfile', describeInput['editProfile']);
     describeGen('changePassword', describeInput['changePassword']);
    // describeGen('logout', describeInput['logout']);
});

/**
 * اعتبارسنجی خروجی
 * @param name
 * @return {Function}
 */
function outputGen(name) {
    return function (result) {
        console.log(result)
        if (!name) {
            return true;
        }
        let tempRes = u.cloneObject(result);
        let valid;
        try {
            if (schema.hasOwnProperty(name)) {
                valid = u.validate(schema[name], tempRes, true);
            } else {
                valid = "schema not found: " + name;
            }
        } catch (e) {
            return new Error(e);
        }
        if ([true, "true"].indexOf(valid) > -1) {
            return true;
        } else {
            return new Error(JSON.stringify(valid));
        }
    };
}

function describeGen(apiName, inputs, callback) { // هاtestCase برای هر یک از  describe فراخوانی توابع تست و ساخت
    callback = callback || function () {
    };
    let resMain = {};
    let promises = [];
    inputs.forEach(function (item) {
        describe(apiName, function () {
            this.timeout(40000);
            promises.push(callMochaTestGen(item));
        });
    });
    q.all(promises)
        .then(function () {
            callback(null, resMain);
        });

    function callMochaTestGen(item) {
        let defer = q.defer();
        u.mochaTestGen(item, function (e, r) {
            Object.assign(resMain, r);
            defer.resolve({});
        });
        return defer.promise;
    }
}

function login(inp, opt) {
    return function (done) {
        let input1 = {
            "username":"amir98",
            "password":"12332"
        };
        let option = options.get("POST", "login");

        option.headers = {
            user: "intern_6",
            pass: "intern_6"
        };
        u.sendRequest(option, "", input1, function (err, res) {
            if (err) {
                done(JSON.stringify(err));
            } else {
                console.log('login \t' + res.data.token)
                opt.headers = {
                    token: res.data.token
                };
                opt.headers = opt.headers || {};
                opt.headers.cookie = 'token=' + res.data.token;
                opt.token = res.data.token;
                done();
            }
        });
    };
}