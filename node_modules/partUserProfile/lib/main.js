const httpHandlers = require("./httpHandlers");
const PartSamadInterface = require("partSamadInterface");
const partAuthenticationInterface = require("partAuthenticationInterface");
const partProfileInterface = require('partProfileInterface');
var u = require('partUtilities'),
    config = require('../config.js'),
    schema = require('../schema.js')

class PartUserProfile {
    constructor(globalOptions) {
        let samadInterface = new PartSamadInterface(globalOptions.partSamadInterfaceConfig.global);
        let authenticationInterface = new partAuthenticationInterface(globalOptions.partAuthenticationInterfaceConfig.global);
        let profileInterface = new partProfileInterface(globalOptions.partProfileInterfaceConfig.global);
        return class UserProfile {
            constructor() {
                this._samad = new samadInterface(globalOptions.partSamadInterfaceConfig.instance);
                this._auth = new authenticationInterface(globalOptions.partAuthenticationInterfaceConfig.instance);
                this._profile = new profileInterface(globalOptions.partProfileInterfaceConfig.instance);
                Object.assign(this, httpHandlers);
            }

            getHttpHandlers() {
                let self = this
                return {
                    signUp: {
                        HEAD: {
                            function: u.metaHandlerGen(config.moduleVersion, 'Nasser Torabzade')
                        },
                        PUT: {
                            function: self.signUp.bind(self),
                            headerSchema: function (headers, data, session, callback) {
                                callback(null, schema.signUpPutHeader);
                            },
                            dataSchema: function (headers, data, session, callback) {
                                callback(null, schema.signUpPutData);
                            }
                        }
                    },
                    login: {
                        HEAD: {
                            function: u.metaHandlerGen(config.moduleVersion, 'Nasser Torabzade')
                        },
                        POST: {
                            function: self.login.bind(self),
                            headerSchema: function (headers, data, session, callback) {
                                callback(null, schema.loginHeader);
                            },
                            dataSchema: function (headers, data, session, callback) {
                                callback(null, schema.loginData);
                            }
                        }
                    },
                    logout: {
                        POST: {
                            function: self.logout.bind(self),
                            headerSchema: function (headers, data, session, callback) {
                                callback(null, schema.logoutHeader);
                            },
                            dataSchema: function (headers, data, session, callback) {
                                callback(null, schema.logoutData);
                            }
                        }
                    },
                    changePass: {
                        HEAD: {
                            function: u.metaHandlerGen(config.moduleVersion, 'Nasser Torabzade')
                        },
                        POST: {
                            function: self.changePass.bind(self),
                            headerSchema: function (headers, data, session, callback) {
                                callback(null, schema.changePasswordHeader);
                            },
                            dataSchema: function (headers, data, session, callback) {
                                callback(null, schema.changePasswordData);
                            }
                        }
                    },
                    profile: {
                        GET: {
                            function: self.getProfile.bind(self),
                            headerSchema: function (headers, data, session, callback) {
                                callback(null, schema.getProfileHeader);
                            },
                            dataSchema: function (headers, data, session, callback) {
                                callback(null, schema.getProfileData);
                            }
                        },
                        POST: {
                            function: self.editProfile.bind(self),
                            headerSchema: function (headers, data, session, callback) {
                                callback(null, schema.editProfileHeader);
                            },
                            dataSchema: function (headers, data, session, callback) {
                                callback(null, schema.editProfileData);
                            }
                        }
                    }

                }
            }
        }
    }
}

module.exports = PartUserProfile;