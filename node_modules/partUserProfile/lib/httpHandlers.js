/**
 * @namespace module.partUserProfile.httpHandlers
 */
const partUserProfile = require('partUserProfile')
const Q = require('q')
const rp = require('request-promise');
const uuid = require('uuid4');


//------------------------  SIGN UP  ----------------------- //ok
/**
 * @summary ثبت نام کاربر
 * @description این متد داده های ورودی را سرویس کارمندان - سمد - پروفایل و اهرازهویت وارد کرده و درصورت موفقیت یک کاربر به این سیستم اضافه میشود
 * @param{!object} request
 * @param{!object} response
 * @param {!string} request.data.id شناسه
 * @param{!object} data
 * @param {!string} request.data.data.username نام کاربری
 * @param {!string} request.data.data.password رمزعبور
 * @param {!string} request.data.data.nationalCode کدملی
 * @param {!string} request.data.data.skill مهارت
 * @param {!string} request.data.data.job شغل
 * @param {!string} request.data.data.managerName نام مدیر
 * @param {!string} request.data.data.firstName نام
 * @param {!string} request.data.data.lastName نام خانوادگی
 * @param {!string} request.data.data.gender جنسیت
 * @param {!string} request.data.data.education تحصیلات
 * @param {!string} request.data.parent نام پدر
 *
 * @return{object} وضعیت انجام عملیات
 *
 */

const signUp = exports.signUp = function (request, response) {
    console.log('-----------------sign up-------------------')

    var self = this;
    var auth = self._auth
    var profile = self._profile
    var samad = self._samad
    var res = []
    var errors = []

    let data = {
        type: 'real',
        id: request.data.id,
        username: request.data.data.username,
        password: request.data.data.password,
        idNumber: request.data.data.nationalCode,
        firstName: request.data.data.firstName,
        lastName: request.data.data.lastName,
        gender: request.data.data.gender,
        education: request.data.data.education,
    }

    let profileData = {
        type: 'real',
        uniqueKey: request.data.data.username,
        idNumber: request.data.data.nationalCode,
        firstName: request.data.data.firstName,
        lastName: request.data.data.lastName,
        gender: request.data.data.gender,
        education: request.data.data.education,
    };

    let authData = {
        username: request.data.data.username,
        password: request.data.data.password
    };


    Q.allSettled([
        auth.addUser(authData, 'active', 'intern_6', {'request-id': uuid(), userIp: '127.0.0.1'}),
        self.employeeService(request, response),
        profile.addProfile(profileData, {'request-id': uuid(), userIp: '127.0.0.1'}),
        samad.addUsers([request.data.data.username], "intern_6", {"request-id": uuid()})
            .then(samad.assignUsersToRole('manager', [request.data.data.username], 'intern_6', {'request-id': uuid()}))
    ])
        .then(function (results) {
            var success = 0;
            results.forEach(function (result) {
                if (result.state === "fulfilled") {

                        //اگر خروجی مربوط به سیستم سمد باشد شرظ زیر اجرا میشود
                    if (Array.isArray(result.value.data)) {
                        if (result.value.data[0].status === 'Already exists!') {
                            errors.push("samad Already exists!")

                        } else if (result.value.data[0].status === 'ok') {
                            res.push('samad')
                            success++
                        }
                        //اگر پاسخ ربوط به سیستم کارمندان باشد شرظ زیر اجرا میشود
                    } else if (result.value === 'داده ها باموفقیت ذخیره شدdata insert in dataStorage,data insert in dataMap') {
                        res.push('employee')
                        success++
                        //اجرای حالت صحیح مربوط به سرویس های پروفایل و اهراز هویت
                    } else if (typeof result.value.data[0] === 'undefined') {
                        if (result.value.data.function === 'undefined') {
                            errors.push('invalid function')
                            // res.push(result.value)
                            // success++
                        } else {
                            res.push(result.value.data.function)
                            success++
                        }

                    }


                } else {
                    if (typeof result.reason.error.meta === 'undefined') {
                        errors.push(result.reason.error)
                    } else {
                        errors.push(result.reason.error.meta.code)
                    }

                }
            });
            console.log(success)
            if (success === 4) {
                response.sendOk('ثبت نام موفقیت امیز')
            } else {

                res.forEach(function (deleteItem) {
                    if (deleteItem === "auth") auth.removeUser({username: request.data.data.username}, 'intern_6', {
                        'request-id': uuid(),
                        userIp: '127.0.0.1'
                    })
                    if (deleteItem === "employee") self.removeEmployee(request, response)
                    if (deleteItem === "samad") samad.removeUsers([request.data.data.username], request.headers.org, {'request-id': uuid()})
                    if (deleteItem === "profile") profile.removeProfileById(request.data.data.nationalCode, {
                        'request-id': uuid(),
                        userIp: '127.0.0.1'
                    })
                })

                console.log(JSON.stringify(res))
                //response.sendFail('err')
                console.log(JSON.stringify(errors))
                response.sendFail(JSON.stringify(errors))
            }
        });

}

/**
 * @summary ثبت نام در سرویس کارمندان
 * @description این متد داده های دریافتی را در سرویس کارمندان ثبت میکند
 * @param {!object} request.data درخواست
 * @return {!object} وضعیت انجام عملیات
 *
 */
exports.employeeService = function (request, response) {
    let deferred = Q.defer()
    const options = {
        url: 'http://localhost:81/dataService',
        method: 'PUT',
        headers: request.headers,
        body: {
            "id": request.data.data.nationalCode,
            "data": request.data.data,
            "parent": request.data.parent
        },
        json: true
    }
    rp(options)
        .then(function (result) {
            console.log('add to employee')
            deferred.resolve(result)
        })
        .catch(function (error) {
            deferred.reject(error)
        })

    return deferred.promise;
}

//------------------------  LOGIN  -------------------------- //ok

/**
 * @summary ورود کاربر به سیستم
 * @description در این تابع بعد از اهراز هویت شدن کاربر با نام کربری و رمزعبور یک سشن و یک کوکی برای کاربر ایجاد میشود
 * @param {!object} request
 * @param {!object} response
 * @param {!string} request.data.username نام کاربری
 * @param {!string} request.data.password رمزعبور
 * @return {!object} وضعیت انجام عملیات
 */
exports.login = function (request, response) {
    console.log('--------------login-------------- ')

    let self = this
    let auth = self._auth
    let samad = self._samad
    let profile = self._profile

    auth.authenticate(
        {username: request.data.username, password: request.data.password}, null, {
            'request-id': uuid(),
            userIp: '127.0.0.1'
        }).then(setSessionByRole(request, response, samad, profile))
        .then(function (result) {
            response.sendOk(result)
        })
        .catch(function (error) {
            response.sendFail(error)
        })

}

/**
 * @summary ایجاد سشن
 * @description نقش کاربر از سیستم سمد گرفته میشود و همراه با نام کاربری داخل یک سشن ذخیره میشود
 * @param {!object} request
 * @param {!string} request.data.username نام کاربری
 * @param {!object} response پاسخ درخواست
 * @param {!object} samad یک نمونه از سرویس سمد
 * @param {!object} profile یک نمونه از سرویس پروفایل
 * @return {promise.<*>} response وضعیت انجام عملیات
 */
function setSessionByRole(request, response, samad, profile) {


    samad.getUsersByUsername([request.data.username], 'intern_6', {'request-id': uuid()})
        .then(function (result) {
            let data = {
                'samadUsername': request.data.username,
                'roles': result.data[0].roles
            }
            request.session.start(data, (err, res) => {
                if (err) {
                    return err
                } else {
                    response.setHeader('Set-Cookie', `token=${res.token};Path=/`);
                    return res
                }
            })
        })
        .catch(function (err) {
            return err
        })
}

exports.setSessionByRole = setSessionByRole;


//------------------------  LOGOUT  ------------------------- //ok
/**
 * @summary حذف سشن
 * @description با فراخوانی این متد سشن موجود حذف میشود و کاربر از سیستم خارج میشود
 * @param {!object} request
 * @param {!object} response
 * @return{!object} وضعیت انجام عملیات
 */
exports.logout = function (request, response) {

    console.log('----------------you call logout-----------------')

    request.session.remove(function (err, res) {
        if (err) {
            response.sendFail(err.message)
        } else {
            request.headers.cookie = null
            response.sendOk('خروج موفقیت امیز')
        }
    });
}

//------------------------  CHANGE_PASS  --------------------- //ok

/**
 * @summary تغییر رمز عبور
 * @description این متد با دریافت کدملی - رمزعبور جدید - ایمیل و نوع کاربر درصورت همخوانی ایمیل وارد شده با ایمیل ثبت شده در سیستم پروفایل رمزعبور کاربر را در سیستم اهراز هویت تغییر میدهد
 * @param {!object} request
 * @param {!string} request.data.type نوع کاربر
 * @param {!string} request.data.nationalCode کدملی
 * @param {!string} request.data.email ایمیل
 * @param {!string} request.data.newPassword رمزعبور جدید
 * @param {!object} response
 * @return {!object} وضعیت انجام عملیات
 */
exports.changePass = function (request, response) {

    console.log('-----------changePass called-----------')

    let self = this;
    let profile = self._profile
    let auth = self._auth

    request.session.get(['samadUsername', 'roles'], function (err, result) {
        if (err) {
            console.log(err.data.message)
            response.sendFail(err.data.message)
        } else {

            profile.getRealProfiles(request.data.nationalCode, [], 'intern_6', {
                'request-id': uuid(),
                userIp: '127.0.0.1'
            }).then(function (res) {
                console.log(res.data.real[0].email)
                if (request.data.email == res.data.real[0].email) {
                    console.log('editable')


                    auth.editUser({username: result.samadUsername}, {password: request.data.newPassword}, 'intern_6', {
                        'request-id': uuid(),
                        userIp: '127.0.0.1'
                    })
                        .then(function (res) {
                            console.log(res)
                            response.sendOk('رمز عبور با موفقیت تغییر کرد.')
                        })
                        .fail(function (err) {
                            console.log(err)
                            response.sendFail('خطا در تغییر رمز عبور')
                        });

                } else {
                    response.sendFail('ایمیل صحیح نیست!')
                }
            })
                .catch(function (error) {
                    response.sendFail('کد ملی معتبر نمی‌باشد! داده‌های ورودی نامعتبرند')
                })


        }
    })
}

//----------------------PROFILE----------------------
/**
 * @summary دریافت پروفایل
 * @description این متد با کدملی کاربر مشخصات پروفایل وی را از سیستم پروفایل دریافت کرده و نمایش میدهد
 * @param {!object} request
 * @param {!integer} request.data.nationalCode کدملی
 * @return {!object} response
 */
exports.getProfile = function (request, response) {
    console.log(request.data)
    console.log('------------getProfile called------------')
    let self = this;
    let profile = self._profile


    request.session.get(['samadUsername'], function (err, result) {

        profile.getProfileByUniqueKey(result.samadUsername, ['idNumber'], null, {
            'request-id': uuid(),
            userIp: '127.0.0.1'
        })
            .then(function (result) {

                self._profile.getRealProfiles(result.data.real[0].idNumber, [], 'intern_6', {
                    'request-id': uuid(),
                    userIp: '127.0.0.1'
                }).then(function (res) {
                    response.sendOk(res.data.real)
                })
                    .catch(function (err) {
                        response.sendFail(err)
                    })

            })
    })


}
/**
 * @summary ویرایش پروفایل
 * @description این متد با کدملی کاربر مشخصات پروفایل وی را از سیستم پروفایل دریافت کرده و نمایش میدهد
 * @param {!object} request
 * @param {!string} request.data.type نوع کاربر
 * @param {!string} request.data.nationalCode کدملی
 * @param {?object[]} داده های اختیاری نظیر firstName-lastName-gender-maritalStatus-fatherName-identityNumber و ...
 * @return{!object} وضعیت انجام عملیات
 */
exports.editProfile = function (request, response) {
    console.log('---------editProfile called------------')
    let self = this;
    let profile = self._profile

    request.session.get(['samadUsername'], function (err, result) {

        profile.getProfileByUniqueKey(result.samadUsername, ['idNumber', 'type'], null, {
            'request-id': uuid(),
            userIp: '127.0.0.1'
        })
            .then(function (result) {
                console.log(result.data.real[0])
                let data = {
                    "type": result.data.real[0].type,
                    "idNumber": result.data.real[0].idNumber.toString(),
                }

                self._profile.editProfile(data, {'request-id': uuid(), userIp: '127.0.0.1'})
                    .then(function (res) {
                        console.log(JSON.stringify(result.data.real[0]))
                        response.sendOk('پروفایل باموفقیت ویرایش شد.')
                    })
                    .catch(function (err) {
                        response.sendFail(err.message)
                    })

            })
    })


}

