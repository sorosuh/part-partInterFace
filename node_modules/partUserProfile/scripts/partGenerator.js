/* eslint-disable indent */
/* eslint-disable no-prototype-builtins */
var PartScriptGenerator = require('PartScriptGenerator');
var config = require('../config.js');

PartScriptGenerator = new PartScriptGenerator({
    moduleName: config.appName || config.moduleName,
    moduleVersion: config.version || config.moduleVersion
});
var typeArray = ['TEST', 'CODE', 'API']
var optionObj = {}
var i

if (process.argv.length === 2) {
    let testRunner = new PartScriptGenerator.TestRunner(config.testRunners);
    let codeRunner = new PartScriptGenerator.CodeDocGen(config.codeDoc);
    Promise.allSettled([testRunner.run(), codeRunner.run()])
        .then(function (results) {
            console.log('\n\n----------------- Final Results: -----------------');
            results.forEach((result, index) => {
                if (result.status === 'fulfilled') {
                    console.log(typeArray[index], ': SUCCESS');
                }
                else {
                    console.log(typeArray[index], ': Failed -> ', result.reason);
                }
            });
        });
}
else if (process.argv.length === 4 && process.argv[3] === 'all') {
    var typeWanted;
    var funcToExec;
    process.argv[2] = process.argv[2].toLowerCase();
    switch (process.argv[2]) {
        case 'test':
            typeWanted = 'TEST';
            funcToExec = new PartScriptGenerator.TestRunner(config.testRunners);
            break;
        case 'code':
            typeWanted = 'CODE';
            funcToExec = new PartScriptGenerator.CodeDocGen(config.codeDoc);
            break;
        case 'api':
            typeWanted = 'API';
            console.log('\n\n----------------- Final Results: -----------------');
            console.log('TO BE DONE');
            break;
        default:
            console.log('\n\n----------------- Final Results: -----------------');
            console.log('Invalid Command');
            break;
    }
    funcToExec.run()
        .then(function () {
            console.log('\n\n----------------- Final Results: -----------------');
            console.log(typeWanted, ': SUCCESS');
        })
        .fail(function (err) {
            console.log('\n\n----------------- Final Results: -----------------');
            console.log(typeWanted, ': Failed -> ', err);
        });
}
else if (process.argv.length === 4) {
    var key = process.argv[3];
    var wrongInput = 0;
    if (key[key.length - 1] === ',' || key[0] === ',') {
        wrongInput = 1;
    }
    else if (key.indexOf(',') !== -1) {
        key = key.split(',');
        if (key.indexOf('all') !== -1) {
            wrongInput = 1;
        }
        else {
            process.argv[2] = process.argv[2].toLowerCase();
            switch (process.argv[2]) {
                case 'test':
                    typeWanted = 'TEST';
                    for (i = 0; i < key.length; i++) {
                        key[i] = key[i].trim();
                        if (config.testRunners.hasOwnProperty(key[i])) {
                            optionObj[key[i]] = config.testRunners[key[i]];
                        }
                    }
                    funcToExec = new PartScriptGenerator.TestRunner(optionObj);
                    break;
                case 'code':
                    typeWanted = 'CODE';
                    optionObj.outputFolderPath = config.codeDoc.outputFolderPath;
                    optionObj.groups = {};
                    for (i = 0; i < key.length; i++) {
                        key[i] = key[i].trim();
                        if (config.codeDoc.groups.hasOwnProperty(key[i])) {
                            optionObj['groups'][key[i]] = config.codeDoc.groups[key[i]];
                        }
                    }
                    funcToExec = new PartScriptGenerator.CodeDocGen(optionObj);
                    break;
                case 'api':
                    typeWanted = 'API';
                    console.log('\n\n----------------- Final Results: -----------------');
                    console.log('TO BE DONE');
                    break;
                default:
                    console.log('\n\n----------------- Final Results: -----------------');
                    console.log('Invalid Command');
                    break;
            }
        }
    }
    else {
        key = key.trim();
        switch (process.argv[2]) {
            case 'test':
                typeWanted = 'TEST';
                if (config.testRunners.hasOwnProperty(key)) {
                    optionObj[key] = config.testRunners[key];
                }
                funcToExec = new PartScriptGenerator.TestRunner(optionObj);
                break;
            case 'code':
                typeWanted = 'CODE';
                optionObj.outputFolderPath = config.codeDoc.outputFolderPath;
                optionObj.groups = {};
                if (config.codeDoc.groups.hasOwnProperty(key)) {
                    optionObj['groups'][key] = config.codeDoc.groups[key];
                }
                funcToExec = new PartScriptGenerator.CodeDocGen(optionObj);
                break;
            case 'api':
                typeWanted = 'API';
                console.log('\n\n----------------- Final Results: -----------------');
                console.log('TO BE DONE');
                break;
            default:
                console.log('\n\n----------------- Final Results: -----------------');
                console.log('Invalid Command');
                break;
        }
    }

    if (wrongInput !== 1) {
        if (isEmpty(optionObj) || (typeWanted === 'CODE' && isEmpty(optionObj.groups))) {
            console.log('Not valid parameters');
        }
        else {
            funcToExec.run()
                .then(function () {
                    console.log('\n\n----------------- Final Results: -----------------');
                    console.log(typeWanted, ': SUCCESS');
                })
                .fail(function (err) {
                    console.log('\n\n----------------- Final Results: -----------------');
                    console.log(typeWanted, ': Failed -> ', err);
                });
        }
    }
    else {
        console.log('Invalid Command');
    }

}

function isEmpty(obj) {
    var returnValue = false;
    if (typeof obj !== 'object' || (Object.keys(obj)).length === 0) {
        returnValue = true;
    }
    return returnValue;
}